{"version":3,"sources":["i18n.ts","utils/styles.ts","components/Spinner/styles.ts","components/Spinner/index.ts","components/Spinner/Spinner.tsx","utils/variables.ts","hooks/useFetch.ts","hooks/useGetRepos.ts","components/LanguageSwitcher/styles.ts","components/LanguageSwitcher/index.ts","components/LanguageSwitcher/LanguageSwitcher.tsx","components/TopButton/styles.ts","components/TopButton/index.ts","components/TopButton/TopButton.tsx","pages/Main/styles.ts","pages/Main/Main.tsx","pages/Main/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["i18n","use","Backend","initReactI18next","init","backend","loadPath","fallbackLng","lng","interpolation","escapeValue","FlexCenter","css","CircularProgressWrapper","styled","div","wrapperHeight","Spinner","isLoading","props","CircularProgress","disableShrink","className","API_HOST","process","useFetch","path","useState","setIsLoading","isDone","setIsDone","isErr","setIsErr","undefined","statusCode","setStatusCode","data","setData","pathRef","useRef","current","reset","initData","fetch","axios","get","then","response","status","catch","err","code","message","replace","codeNumber","Number","finally","useGetRepos","search","page","per_page","accumulatedRepos","setAccumulatedRepos","query","qs","stringify","q","encodeURIComponent","addQueryPrefix","items","total_count","orinReset","result","useEffect","r","LangBtnWrapper","LanguageSwitcher","prop","useTranslation","showLangNav","setShowLangNav","langBtnRef","React","closeLangNav","switchLang","lang","changeLanguage","IconButton","ref","onClick","fontSize","Popper","open","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","MenuItem","selected","language","FabWrapper","TopButton","show","Zoom","in","unmountOnExit","Fab","size","color","AppWrapper","SearchBlock","TextField","MaterialTextField","RepoList","RepoListItem","a","Main","t","setSearch","setPage","repos","repoCount","debounceFetch","useCallback","debounce","repoListRef","scrollTo","p","showTopBtn","setShowTopBtn","showSnackbar","setShowSnackbar","isNotFinished","useMemo","onListScroll","clientHeight","scrollTop","scrollHeight","repoList","addEventListener","removeEventListener","Typography","align","variant","component","label","value","onChange","e","target","map","repo","i","href","svn_url","rel","full_name","id","Snackbar","onClose","TransitionComponent","Fade","autoHideDuration","display","top","left","behavior","App","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.bbefea4c.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-http-backend';\n\ni18n\n  // 使用 i18next-http-backend\n  .use(Backend)\n  // 將 i18next 傳入 react-i18next 裡面\n  .use(initReactI18next)\n  // 實例化 initReactI18next\n  .init({\n    backend: {\n      //網頁載入時去下載語言檔的位置\n      loadPath: './locales/{{lng}}/{{ns}}.json',\n    },\n    // 當目前的語言檔找不到對應的字詞時，會用 fallbackLng (en) 作為預設語言\n    fallbackLng: 'en',\n    // 預設語言\n    lng: 'en',\n    interpolation: {\n      // 是否要讓字詞 escaped 來防止 xss 攻擊，這裡因為 React.js 已經做了，就設成 false即可\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import { css } from 'styled-components';\n\nexport const FlexCenter = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from 'styled-components';\n\nimport { FlexCenter } from 'utils/styles';\n\nimport { SpinnerType } from './types';\n\nexport const CircularProgressWrapper = styled.div<SpinnerType>`\n  ${FlexCenter}\n  ${({ wrapperHeight }) => wrapperHeight && `height: ${wrapperHeight};`}\n\n  .circular {\n    margin: 20px 0;\n    color: thistle;\n  }\n`;\n","import Spinner from './Spinner';\n\nexport default Spinner;\n","import React, { FC } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { SpinnerType } from './types';\nimport { CircularProgressWrapper } from './styles';\n\nconst Spinner: FC<SpinnerType> = ({ isLoading = true, ...props }) => {\n  return isLoading ? (\n    <CircularProgressWrapper {...props}>\n      <CircularProgress disableShrink className=\"circular\" />\n    </CircularProgressWrapper>\n  ) : null;\n};\n\nexport default Spinner;\n","// env\nexport const API_HOST = process.env.REACT_APP_API_HOST;\n\n// settings\nexport const per_page = 100;\n\n// breakpoint\nexport const TABLET_MIN = '1024px';\nexport const PAD_MAX = '1023px';\nexport const PAD_MIN = '768px';\nexport const MOBILE_MAX = '767px';\n","import { useState, useRef } from 'react';\nimport axios, { AxiosResponse } from 'axios';\n\nimport { API_HOST } from 'utils/variables';\n\ntype UseFetchParameter = {\n  path: string;\n};\n\ntype UseFetchRes<D> = {\n  isLoading: boolean;\n  isDone: boolean;\n  isErr: boolean;\n  data: undefined | D;\n  statusCode: undefined | number;\n  fetch: VoidFunction;\n  reset: VoidFunction;\n};\n\nconst useFetch = <D>({ path }: UseFetchParameter): UseFetchRes<D> => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isDone, setIsDone] = useState<boolean>(false);\n  const [isErr, setIsErr] = useState<boolean>(false);\n  const [statusCode, setStatusCode] = useState<undefined | number>(undefined);\n  const [data, setData] = useState<undefined | D>(undefined);\n\n  // due to the debounce function, the fetch function couldn't get the newest path\n  const pathRef = useRef(path);\n  pathRef.current = path;\n\n  const fetch = ({ initData } = { initData: false }) => {\n    reset({ initData });\n    setIsLoading(true);\n\n    axios\n      .get(`${API_HOST}${pathRef.current}`)\n      .then(function (response: AxiosResponse<D>) {\n        setData(response.data);\n        setStatusCode(response.status);\n      })\n      .catch((err) => {\n        const code = err.message.replace('Request failed with status code ', '');\n        const codeNumber = Number(code);\n        if (code == codeNumber) setStatusCode(codeNumber);\n        setIsErr(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n        setIsDone(true);\n      });\n  };\n\n  const reset = ({ initData } = { initData: true }) => {\n    setIsLoading(false);\n    setIsDone(false);\n    setIsErr(false);\n    setStatusCode(undefined);\n    if (initData) setData(undefined);\n  };\n\n  return {\n    isLoading,\n    isDone,\n    isErr,\n    data,\n    statusCode,\n    fetch,\n    reset,\n  };\n};\n\nexport default useFetch;\n","import { useState, useEffect } from 'react';\nimport qs from 'qs';\nimport { Endpoints } from '@octokit/types';\n\nimport useFetch from 'hooks/useFetch';\n\ntype ReposResponse = Endpoints['GET /search/repositories']['response']['data'];\n\ntype UseGetReposParameter = {\n  search: string;\n  page: number;\n  per_page: number;\n};\n\nconst useGetRepos = ({ search, page, per_page }: UseGetReposParameter) => {\n  const [accumulatedRepos, setAccumulatedRepos] = useState<ReposResponse['items']>([]);\n\n  const query = qs.stringify(\n    {\n      q: encodeURIComponent(search),\n      page,\n      per_page,\n    },\n    { addQueryPrefix: true },\n  );\n\n  const {\n    data = {\n      items: [],\n      total_count: 0,\n    },\n    reset: orinReset,\n    ...result\n  } = useFetch<ReposResponse>({\n    path: `/search/repositories${query}`,\n  });\n\n  useEffect(() => {\n    if (result.isDone) {\n      if (page === 1) {\n        setAccumulatedRepos(data.items);\n      } else {\n        setAccumulatedRepos((r) => [...r, ...data.items]);\n      }\n    }\n  }, [result.isDone]);\n\n  const reset = () => {\n    orinReset();\n    setAccumulatedRepos([]);\n  };\n\n  return {\n    data: {\n      ...data,\n      items: accumulatedRepos,\n    },\n    reset,\n    ...result,\n  };\n};\n\nexport default useGetRepos;\n","import styled from 'styled-components';\n\nexport const LangBtnWrapper = styled.div`\n  z-index: 999;\n  position: fixed;\n  right: 5px;\n  top: 5px;\n`;\n","import LanguageSwitcher from './LanguageSwitcher';\n\nexport default LanguageSwitcher;\n","import React, { FC, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Popper,\n  Grow,\n  Paper,\n  ClickAwayListener,\n  MenuList,\n  MenuItem,\n  IconButton,\n} from '@material-ui/core';\nimport LanguageIcon from '@material-ui/icons/Language';\n\nimport { LangBtnWrapper } from './styles';\n\nconst LanguageSwitcher: FC = (prop) => {\n  const { i18n } = useTranslation();\n\n  const [showLangNav, setShowLangNav] = useState(false);\n\n  const langBtnRef = React.useRef(null);\n\n  const openLangNav = () => setShowLangNav(true);\n  const closeLangNav = () => setShowLangNav(false);\n\n  const switchLang = (lang: 'en' | 'zh-tw') => () => {\n    i18n.changeLanguage(lang);\n    closeLangNav();\n  };\n\n  return (\n    <LangBtnWrapper {...prop}>\n      <IconButton ref={langBtnRef} onClick={openLangNav}>\n        <LanguageIcon fontSize=\"small\" />\n      </IconButton>\n\n      <Popper\n        open={showLangNav}\n        anchorEl={langBtnRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={closeLangNav}>\n                <MenuList>\n                  <MenuItem onClick={switchLang('en')} selected={i18n.language === 'en'}>\n                    English\n                  </MenuItem>\n                  <MenuItem onClick={switchLang('zh-tw')} selected={i18n.language === 'zh-tw'}>\n                    繁體中文\n                  </MenuItem>\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </LangBtnWrapper>\n  );\n};\n\nexport default LanguageSwitcher;\n","import styled from 'styled-components';\n\nexport const FabWrapper = styled.div`\n  position: fixed;\n  bottom: 40px;\n  right: 25px;\n`;\n","import TopButton from './TopButton';\n\nexport default TopButton;\n","import React, { FC } from 'react';\nimport { Fab, Zoom } from '@material-ui/core';\nimport NavigationIcon from '@material-ui/icons/Navigation';\n\nimport { BackToTopButtonType } from './types';\nimport { FabWrapper } from './styles';\n\nconst TopButton: FC<BackToTopButtonType> = ({ show = true, onClick, ...props }) => {\n  return (\n    <Zoom in={show} unmountOnExit>\n      <FabWrapper>\n        <Fab size=\"small\" color=\"secondary\" onClick={onClick}>\n          <NavigationIcon />\n        </Fab>\n      </FabWrapper>\n    </Zoom>\n  );\n};\n\nexport default TopButton;\n","import styled from 'styled-components';\nimport MaterialTextField from '@material-ui/core/TextField';\n\nimport { MOBILE_MAX } from 'utils/variables';\nimport { FlexCenter } from 'utils/styles';\n\nexport const AppWrapper = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  padding-top: 25px;\n`;\n\nexport const SearchBlock = styled.div`\n  margin: 0 25px 25px;\n\n  > div {\n    width: 100%;\n  }\n`;\n\nexport const TextField = styled(MaterialTextField)`\n  &.input {\n    .Mui-focused {\n      &.MuiFormLabel-root {\n        color: #914191;\n      }\n      &.MuiInput-underline:after,\n      &.MuiInput-underline:before {\n        border-bottom-color: #914191;\n      }\n    }\n    .MuiInput-underline:hover:not(.Mui-disabled):before,\n    .MuiInput-underline:hover:after {\n      border-bottom: 2px solid #914191;\n    }\n  }\n`;\n\nexport const RepoList = styled.div`\n  flex: 1;\n  overflow: scroll;\n`;\n\nexport const RepoListItem = styled.a`\n  ${FlexCenter}\n  height: 40px;\n  width: 100%;\n  color: #000;\n  background-color: whitesmoke;\n  text-decoration: none;\n  border: 1px solid #fff;\n  padding: 25px;\n\n  &:visited {\n    color: #999;\n  }\n\n  &:hover {\n    color: #fff;\n    background-color: thistle;\n\n    &:visited {\n      background-color: #d2aed2;\n    }\n  }\n\n  @media (max-width: ${MOBILE_MAX}) {\n    justify-content: left;\n  }\n`;\n","import React, { ChangeEvent, useState, useMemo, useCallback, useRef, useEffect } from 'react';\nimport { debounce } from 'ts-debounce';\nimport { useTranslation } from 'react-i18next';\nimport { Typography, Snackbar, Fade } from '@material-ui/core';\n\nimport { per_page } from 'utils/variables';\nimport useGetRepos from 'hooks/useGetRepos';\nimport LanguageSwitcher from 'components/LanguageSwitcher';\nimport Spinner from 'components/Spinner';\nimport TopButton from 'components/TopButton';\n\nimport { AppWrapper, SearchBlock, TextField, RepoList, RepoListItem } from './styles';\n\nfunction Main() {\n  /* i18n */\n\n  const { t } = useTranslation();\n\n  /* main data */\n\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(1);\n\n  const {\n    isLoading,\n    isDone,\n    data: { items: repos, total_count: repoCount },\n    fetch,\n  } = useGetRepos({\n    search,\n    page,\n    per_page,\n  });\n\n  const debounceFetch = useCallback(debounce(fetch, 500), []);\n\n  const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n    // init page\n    setPage(1);\n    debounceFetch();\n  };\n\n  useEffect(() => {\n    if (isDone) {\n      if (page === 1) {\n        repoListRef.current?.scrollTo(0, 0);\n      }\n      setPage((p) => p + 1);\n    }\n  }, [isDone]);\n\n  /* scroll */\n\n  const [showTopBtn, setShowTopBtn] = useState(false);\n\n  const [showSnackbar, setShowSnackbar] = useState(false);\n\n  const isNotFinished = useMemo(() => repoCount > per_page * (page - 1), [repoCount, page]);\n\n  const closeSnackbar = () => setShowSnackbar(false);\n\n  const repoListRef = useRef<HTMLDivElement>(null);\n\n  const onTopBottomClick = (): void =>\n    repoListRef.current?.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n\n  const onListScroll = useCallback(() => {\n    if (!repoListRef.current) return;\n\n    // clientHeight + scrollTop = scrollHeight\n    const { clientHeight, scrollTop, scrollHeight } = repoListRef.current;\n\n    if (!isLoading && scrollTop + clientHeight >= scrollHeight) {\n      if (isNotFinished) fetch();\n      else setShowSnackbar(true);\n    }\n\n    if (scrollTop > 100) setShowTopBtn(true);\n    else setShowTopBtn(false);\n  }, [repoListRef, isLoading, isNotFinished, fetch]);\n\n  useEffect(() => {\n    const repoList = repoListRef.current;\n    if (repoList) repoList.addEventListener('scroll', onListScroll);\n    return () => {\n      if (repoList) repoList.removeEventListener('scroll', onListScroll);\n    };\n  }, [onListScroll]);\n\n  return (\n    <AppWrapper>\n      <Typography align=\"center\" variant=\"h3\" component=\"h1\">\n        {t('heading')}\n      </Typography>\n\n      <LanguageSwitcher />\n\n      <SearchBlock>\n        <TextField\n          label={t('label')}\n          value={search}\n          onChange={handleSearchChange}\n          className=\"input\"\n        />\n      </SearchBlock>\n\n      <RepoList ref={repoListRef}>\n        {repos.map((repo, i) => (\n          <RepoListItem key={`${repo.id}${i}`} href={repo.svn_url} target=\"_blank\" rel=\"noreferrer\">\n            {repo.full_name}\n          </RepoListItem>\n        ))}\n\n        <Spinner isLoading={isLoading} />\n\n        <Snackbar\n          open={showSnackbar}\n          onClose={closeSnackbar}\n          TransitionComponent={Fade}\n          autoHideDuration={1000}\n        >\n          <Typography variant=\"overline\" display=\"block\">\n            {t('noMoreData')}\n          </Typography>\n        </Snackbar>\n\n        <TopButton show={showTopBtn} onClick={onTopBottomClick} />\n      </RepoList>\n    </AppWrapper>\n  );\n}\n\nexport default Main;\n","import Main from './Main';\n\nexport default Main;\n","import React, { Suspense } from 'react';\nimport 'fontsource-roboto';\nimport 'normalize.css';\n\nimport './i18n.ts';\nimport './index.css';\nimport Spinner from 'components/Spinner';\nimport Main from 'pages/Main';\n\nfunction App() {\n  return (\n    <Suspense fallback={<Spinner wrapperHeight=\"100vh\" />}>\n      <Main />\n    </Suspense>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root') as HTMLElement;\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}